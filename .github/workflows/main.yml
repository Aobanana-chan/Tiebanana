# This is a basic workflow to help you get started with Actions

name: Build Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags:
      - v*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  PROPERTIES_PATH: "./android/key.properties"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # setup JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v3.0.0
        with:
          distribution: "zulu"
          java-version: "17"
      # flutter env
      - name: Flutter action
        uses: subosito/flutter-action@v2.3.0
        with:
          channel: "stable"
          flutter-version: "3.7.7"
      #setup key
      - run: echo "${{ secrets.KEYSTORE2 }}" | base64 --decode > key.jks
      # Creating the key.properties file
      - run: |
          echo keyPassword=\${{ secrets.KEY_STORE }} > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ secrets.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=\${{ secrets.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
          echo storeFile=../key.jks >> ${{env.PROPERTIES_PATH}}
      # get dependence
      - run: flutter pub get
      # build Entity
      - run: flutter pub run build_runner build
      # build
      # - run: flutter build apk
      - run: flutter build apk --split-per-abi
      # publish
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.RElEASE_TOKEN }}
          artifacts: "build/app/outputs/apk/release/*.apk"
